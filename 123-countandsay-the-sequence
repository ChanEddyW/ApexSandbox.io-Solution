public string countAndSay(integer N) {
    List<String> sequences = new List<String>{'1', '11'};

    for (Integer i = 2; i < N; i++) {
        System.debug(LoggingLevel.INFO, 'sequences = ' + sequences);

        System.debug(LoggingLevel.INFO, 'i = ' + i);

        String prevSequence = sequences.get(i - 1);

        System.debug(LoggingLevel.INFO, 'prevSequence = ' + prevSequence);

        Integer prevDigit = prevSequence.charAt(0) - 48;

        System.debug(LoggingLevel.INFO, 'prevDigit = ' + prevDigit);

        String currSequence = '';

        Integer count = 0;

        for (Integer j = 1; j <= prevSequence.length(); j++) {
            System.debug(LoggingLevel.INFO, 'j = ' + j);

            Integer currDigit = (j < prevSequence.length()) ? prevSequence.charAt(j) - 48 : -1;

            System.debug(LoggingLevel.INFO, 'currDigit = ' + currDigit);

            if (currDigit == prevDigit) {
                count++;

                System.debug(LoggingLevel.INFO, 'count = ' + count);
            } else {
                count++;

                System.debug(LoggingLevel.INFO, 'count = ' + count);

                currSequence += String.valueOf(count) + String.valueOf(prevDigit);

                System.debug(LoggingLevel.INFO, 'currSequence = ' + currSequence);

                count = 0;

                System.debug(LoggingLevel.INFO, 'count = ' + count);

                prevDigit = currDigit;

                System.debug(LoggingLevel.INFO, 'prevDigit = ' + prevDigit);
            }
        }

        sequences.add(currSequence);
    }

    return sequences[N - 1];
}