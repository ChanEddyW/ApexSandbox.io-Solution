public List<Account> getAccounts(List<Account> accounts) {
    if (accounts != null) {
        // Add the Account wrapper objects to a list.
        List<AccountWrapper> accountWrappers = new List<AccountWrapper>();

        for (Account acc : accounts) {
            accountWrappers.add(
                new AccountWrapper(
                    acc
                )
            );
        }

        accountWrappers.sort();

        accounts.clear();

        for (AccountWrapper accountWrapper : accountWrappers) {
            accounts.add(
                accountWrapper.acct
            );
        }
    }

    return accounts;
}

public class AccountWrapper implements Comparable {
    public Account acct {get; private set;}

    // Constructor
    public AccountWrapper(Account acc) {
        // Guard against wrapping a null 
        if(acc == null) {
            Exception e = new NullPointerException();

            e.setMessage('Account argument cannot be null');

            throw e;
        }

        acct = acc;
    }

    // Compare Accounts based on the Account AnnualRevenue.
    public Integer compareTo(Object compareTo) {
        // Cast argument to AccountWrapper
        AccountWrapper compareToacct = (AccountWrapper) compareTo;

        // The return value of 0 indicates that both elements are equal.
        Integer returnValue = 0;

        if ((acct.AnnualRevenue == null) && (compareToacct.acct.AnnualRevenue == null)) {
            // both wrappers have null AnnualRevenue
            returnValue = 0;
        } else if ((acct.AnnualRevenue == null) && (compareToacct.acct.AnnualRevenue != null)){
            // nulls-first implementation
            // returnValue = -1;

            returnValue = 1;
        } else if ((acct.AnnualRevenue != null) && (compareToacct.acct.AnnualRevenue == null)){
            // nulls-first implementation
            // returnValue = 1;

            returnValue = -1;
        } else if (acct.AnnualRevenue > compareToacct.acct.AnnualRevenue) {
            // Set return value to a positive value.
            // returnValue = 1;

            // Set return value to a negative value.
            returnValue = -1;
        } else if (acct.AnnualRevenue < compareToacct.acct.AnnualRevenue) {
            // Set return value to a negative value.
            // returnValue = -1;

            // Set return value to a positive value.
            returnValue = 1;
        }

        return returnValue;
    }
}