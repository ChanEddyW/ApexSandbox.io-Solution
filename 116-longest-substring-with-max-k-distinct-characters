public static Integer longestDistinctSubstring(String str, Integer k){ 
    Map<String, Integer> countByCharacter = new Map<String, Integer>();
    Integer sum = 0;
    Integer max = 0;

    for (String character : str.split('')) {
        System.debug(LoggingLevel.INFO, 'character = ' + character);

        if (countByCharacter.size() == k && !countByCharacter.containsKey(character)) {
            for (Integer count : countByCharacter.values()) {
                sum += count;
            }

            System.debug(LoggingLevel.INFO, 'sum = ' + sum);

            max = Math.max(sum, max);
            // max = (sum > max) ? sum : max;

            System.debug(LoggingLevel.INFO, 'max = ' + max);

            countByCharacter.clear();

            countByCharacter.put(character, 1);

            System.debug(LoggingLevel.INFO, 'countByCharacter = ' + countByCharacter);

            sum = 0;
            
        } else if (countByCharacter.containsKey(character)) {
            countByCharacter.put(character, countByCharacter.get(character) + 1);

            System.debug(LoggingLevel.INFO, 'countByCharacter = ' + countByCharacter);
        } else {
            countByCharacter.put(character, 1);

            System.debug(LoggingLevel.INFO, 'countByCharacter = ' + countByCharacter);
        }
    }

    for (Integer count : countByCharacter.values()) {
        sum += count;
    }

    System.debug(LoggingLevel.INFO, 'sum = ' + sum);
    System.debug(LoggingLevel.INFO, 'max = ' + max);

    return Math.max(sum, max);
}